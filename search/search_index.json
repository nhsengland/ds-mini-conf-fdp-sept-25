{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Python GitHub Pages Documentation","text":"<p>Welcome to the Python GitHub Pages project! This site serves as a comprehensive resource for learning and exploring Python programming. Below, you will find links to various sections that cover different aspects of Python, from getting started to advanced topics.</p>"},{"location":"#table-of-contents","title":"Table of Contents","text":"<ul> <li>Getting Started: A beginner-friendly guide to Python, including installation and basic syntax.</li> <li>Advanced Topics: Explore more complex subjects such as decorators, generators, and context managers.</li> <li>Popular Libraries: Learn about widely-used Python libraries like NumPy, Pandas, and Flask, with installation instructions and usage examples.</li> <li>Frequently Asked Questions: Find answers to common questions and misconceptions about Python.</li> </ul> <p>We hope you find this documentation helpful as you embark on your Python programming journey!</p>"},{"location":"advanced-topics/","title":"Advanced Topics in Python","text":""},{"location":"advanced-topics/#decorators","title":"Decorators","text":"<p>Decorators are a powerful feature in Python that allows you to modify the behavior of a function or class. They are often used for logging, enforcing access control, instrumentation, and caching. A decorator is a function that takes another function as an argument and extends its behavior without explicitly modifying it.</p>"},{"location":"advanced-topics/#example-of-a-simple-decorator","title":"Example of a Simple Decorator","text":"<pre><code>def my_decorator(func):\n    def wrapper():\n        print(\"Something is happening before the function is called.\")\n        func()\n        print(\"Something is happening after the function is called.\")\n    return wrapper\n\n@my_decorator\ndef say_hello():\n    print(\"Hello!\")\n\nsay_hello()\n</code></pre>"},{"location":"advanced-topics/#generators","title":"Generators","text":"<p>Generators are a special type of iterator in Python that allow you to iterate over a sequence of values without storing them all in memory at once. They are defined using the <code>yield</code> statement, which allows the function to return a value and pause its execution, resuming later from where it left off.</p>"},{"location":"advanced-topics/#example-of-a-generator","title":"Example of a Generator","text":"<pre><code>def count_up_to(n):\n    count = 1\n    while count &lt;= n:\n        yield count\n        count += 1\n\nfor number in count_up_to(5):\n    print(number)\n</code></pre>"},{"location":"advanced-topics/#context-managers","title":"Context Managers","text":"<p>Context managers are a way to allocate and release resources precisely when you want to. The most common use case is file handling, where you want to ensure that a file is properly closed after its suite finishes, even if an exception is raised.</p>"},{"location":"advanced-topics/#using-with-statement","title":"Using <code>with</code> Statement","text":"<pre><code>with open('example.txt', 'r') as file:\n    contents = file.read()\n    print(contents)\n</code></pre>"},{"location":"advanced-topics/#creating-a-custom-context-manager","title":"Creating a Custom Context Manager","text":"<p>You can create your own context manager using the <code>contextlib</code> module or by defining a class with <code>__enter__</code> and <code>__exit__</code> methods.</p> <pre><code>class MyContext:\n    def __enter__(self):\n        print(\"Entering the context\")\n        return self\n\n    def __exit__(self, exc_type, exc_value, traceback):\n        print(\"Exiting the context\")\n\nwith MyContext() as context:\n    print(\"Inside the context\")\n</code></pre>"},{"location":"advanced-topics/#conclusion","title":"Conclusion","text":"<p>Understanding these advanced topics will help you write more efficient and Pythonic code. Decorators, generators, and context managers are essential tools in a Python programmer's toolkit, enabling cleaner and more maintainable code.</p>"},{"location":"faq/","title":"Frequently Asked Questions about Python","text":""},{"location":"faq/#what-is-python","title":"What is Python?","text":"<p>Python is a high-level, interpreted programming language known for its readability and versatility. It is widely used for web development, data analysis, artificial intelligence, scientific computing, and more.</p>"},{"location":"faq/#how-do-i-install-python","title":"How do I install Python?","text":"<p>You can install Python by downloading it from the official Python website. Follow the installation instructions for your operating system (Windows, macOS, or Linux).</p>"},{"location":"faq/#what-is-the-difference-between-python-2-and-python-3","title":"What is the difference between Python 2 and Python 3?","text":"<p>Python 3 is the latest version of Python and includes many improvements and new features over Python 2. Python 2 has reached the end of its life and is no longer maintained. It is recommended to use Python 3 for all new projects.</p>"},{"location":"faq/#how-do-i-run-a-python-script","title":"How do I run a Python script?","text":"<p>You can run a Python script by using the command line. Navigate to the directory where your script is located and use the command:</p> <pre><code>python script_name.py\n</code></pre> <p>Replace <code>script_name.py</code> with the name of your Python file.</p>"},{"location":"faq/#what-are-python-libraries","title":"What are Python libraries?","text":"<p>Python libraries are collections of pre-written code that you can use to perform common tasks. They help you save time and effort by providing reusable functions and classes. Some popular libraries include NumPy, Pandas, and Flask.</p>"},{"location":"faq/#how-do-i-manage-dependencies-in-python","title":"How do I manage dependencies in Python?","text":"<p>You can manage dependencies in Python using a package manager like <code>pip</code>. You can install packages using the command:</p> <pre><code>pip install package_name\n</code></pre> <p>You can also create a <code>requirements.txt</code> file to specify your project's dependencies and install them all at once with:</p> <pre><code>pip install -r requirements.txt\n</code></pre>"},{"location":"faq/#what-is-a-virtual-environment","title":"What is a virtual environment?","text":"<p>A virtual environment is a self-contained directory that contains a Python installation for a particular version of Python, plus several additional packages. It allows you to manage dependencies for different projects separately. You can create a virtual environment using:</p> <pre><code>python -m venv env_name\n</code></pre> <p>Replace <code>env_name</code> with your desired environment name.</p>"},{"location":"faq/#where-can-i-find-help-with-python","title":"Where can I find help with Python?","text":"<p>You can find help with Python through various resources, including:</p> <ul> <li>The official Python documentation</li> <li>Online forums like Stack Overflow</li> <li>Python community groups and meetups</li> <li>Tutorials and courses available on platforms like Coursera, Udemy, and edX.</li> </ul>"},{"location":"getting-started/","title":"Getting Started with Python","text":"<p>Welcome to the Python Getting Started guide! This document is designed to help you set up Python on your machine and get you started with the basics of programming in Python.</p>"},{"location":"getting-started/#installation","title":"Installation","text":""},{"location":"getting-started/#windows","title":"Windows","text":"<ol> <li>Download the Python installer from the official Python website.</li> <li>Run the installer and ensure you check the box that says \"Add Python to PATH\".</li> <li>Follow the installation instructions.</li> </ol>"},{"location":"getting-started/#macos","title":"macOS","text":"<ol> <li>You can install Python using Homebrew. Open your terminal and run:    <code>brew install python</code></li> <li>Alternatively, download the installer from the official Python website and follow the instructions.</li> </ol>"},{"location":"getting-started/#linux","title":"Linux","text":"<ol> <li>Most Linux distributions come with Python pre-installed. You can check if Python is installed by running:    <code>python3 --version</code></li> <li>If it's not installed, you can install it using:    <code>sudo apt update    sudo apt install python3</code></li> </ol>"},{"location":"getting-started/#basic-syntax","title":"Basic Syntax","text":""},{"location":"getting-started/#hello-world","title":"Hello, World!","text":"<p>The first program you should write in any programming language is a simple \"Hello, World!\" program. In Python, you can do this with the following code:</p> <pre><code>print(\"Hello, World!\")\n</code></pre>"},{"location":"getting-started/#variables-and-data-types","title":"Variables and Data Types","text":"<p>In Python, you can create variables to store data. Here are some examples:</p> <pre><code># Integer\nage = 30\n\n# Float\nheight = 5.9\n\n# String\nname = \"Alice\"\n\n# Boolean\nis_student = True\n</code></pre>"},{"location":"getting-started/#control-structures","title":"Control Structures","text":"<p>Python uses indentation to define blocks of code. Here\u2019s an example of a simple <code>if</code> statement:</p> <pre><code>if age &gt;= 18:\n    print(\"You are an adult.\")\nelse:\n    print(\"You are a minor.\")\n</code></pre>"},{"location":"getting-started/#simple-examples","title":"Simple Examples","text":""},{"location":"getting-started/#a-simple-calculator","title":"A Simple Calculator","text":"<p>Here\u2019s a basic example of a calculator that adds two numbers:</p> <pre><code>def add(x, y):\n    return x + y\n\nnum1 = 5\nnum2 = 10\nresult = add(num1, num2)\nprint(\"The sum is:\", result)\n</code></pre>"},{"location":"getting-started/#looping-through-a-list","title":"Looping Through a List","text":"<p>You can use loops to iterate through lists. Here\u2019s an example:</p> <pre><code>fruits = [\"apple\", \"banana\", \"cherry\"]\nfor fruit in fruits:\n    print(fruit)\n</code></pre>"},{"location":"getting-started/#conclusion","title":"Conclusion","text":"<p>Congratulations! You have now set up Python and learned some basic syntax. You can explore more about Python programming by checking out the other sections of this documentation. Happy coding!</p>"},{"location":"libraries/","title":"Popular Python Libraries","text":"<p>Python has a rich ecosystem of libraries that extend its capabilities and make it suitable for a wide range of applications. This section discusses some of the most popular Python libraries, including installation instructions and basic usage examples.</p>"},{"location":"libraries/#numpy","title":"NumPy","text":"<p>NumPy is a fundamental package for scientific computing in Python. It provides support for arrays, matrices, and a variety of mathematical functions.</p>"},{"location":"libraries/#installation","title":"Installation","text":"<p>To install NumPy, use pip:</p> <pre><code>pip install numpy\n</code></pre>"},{"location":"libraries/#basic-usage","title":"Basic Usage","text":"<p>Here is a simple example of how to use NumPy:</p> <pre><code>import numpy as np\n\n# Create a 1D array\narray = np.array([1, 2, 3, 4, 5])\nprint(\"1D Array:\", array)\n\n# Create a 2D array (matrix)\nmatrix = np.array([[1, 2, 3], [4, 5, 6]])\nprint(\"2D Array (Matrix):\\n\", matrix)\n\n# Perform basic operations\nprint(\"Sum of array:\", np.sum(array))\nprint(\"Mean of matrix:\", np.mean(matrix))\n</code></pre>"},{"location":"libraries/#pandas","title":"Pandas","text":"<p>Pandas is a powerful library for data manipulation and analysis. It provides data structures like Series and DataFrames that make it easy to work with structured data.</p>"},{"location":"libraries/#installation_1","title":"Installation","text":"<p>To install Pandas, use pip:</p> <pre><code>pip install pandas\n</code></pre>"},{"location":"libraries/#basic-usage_1","title":"Basic Usage","text":"<p>Here is a simple example of how to use Pandas:</p> <pre><code>import pandas as pd\n\n# Create a DataFrame\ndata = {\n    'Name': ['Alice', 'Bob', 'Charlie'],\n    'Age': [25, 30, 35],\n    'City': ['New York', 'Los Angeles', 'Chicago']\n}\ndf = pd.DataFrame(data)\n\n# Display the DataFrame\nprint(\"DataFrame:\\n\", df)\n\n# Basic operations\nprint(\"Average Age:\", df['Age'].mean())\nprint(\"People from New York:\\n\", df[df['City'] == 'New York'])\n</code></pre>"},{"location":"libraries/#flask","title":"Flask","text":"<p>Flask is a lightweight web framework for Python that makes it easy to build web applications.</p>"},{"location":"libraries/#installation_2","title":"Installation","text":"<p>To install Flask, use pip:</p> <pre><code>pip install Flask\n</code></pre>"},{"location":"libraries/#basic-usage_2","title":"Basic Usage","text":"<p>Here is a simple example of how to create a basic web application using Flask:</p> <pre><code>from flask import Flask\n\napp = Flask(__name__)\n\n@app.route('/')\ndef home():\n    return \"Hello, Flask!\"\n\nif __name__ == '__main__':\n    app.run(debug=True)\n</code></pre>"},{"location":"libraries/#conclusion","title":"Conclusion","text":"<p>These libraries are just a few examples of the powerful tools available in the Python ecosystem. Whether you're working with data, building web applications, or performing scientific computations, there's likely a library that can help you achieve your goals.</p>"}]}